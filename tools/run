#!/usr/bin/env sh

set -eu

# Start timer.
start=$(date '+%s.%N')

log() { printf "[%s] %s\n" "$(date '+%H:%M:%S')" "$@"; }

err() { printf "%s\n" "$@" >&2; }

took() {
    now=$(date '+%s.%N') # Unix Epoch and nanoseconds.
    res=$(printf "%f %f - p" "$now" "$start" | dc) # [FP]orth.
    log "$(printf "Done.  Action took %.2fs to complete.\n" "$res")"
}

check() {
    hint() {
        case "$1" in
            air) printf "Install it with 'go install github.com/cosmtrek/air@latest'.\n" ;;
            curl) printf "Install 'curl' with your package manager.\n" ;;
            go) printf "Install 'go' with your package manager.\n" ;;
            git) printf "Install 'git' with your package manager.\n" ;;
            sassc) printf "Install 'sassc' with your package manager.\n" ;;
            unzip) printf "Install 'unzip' with your package manager.\n" ;;
            vips) printf "Install 'vips' with your package manager.\n" ;;
        esac
    }

    for arg in "$@"; do
        if ! command -v "$arg" >/dev/null; then
            err "Error: Missing '$arg' dependency."
            err "$(hint "$arg")"
            return 1
        fi
    done
}

getFonts() {
    log "Downloading fonts."

    # Extract the latest release.
    url="https://api.github.com/repos/rsms/inter/releases/latest"
    src=$(curl -s "$url" | sed -n 's|.*browser_download_url.*"\(http.*\)"|\1|p')

    # Extract tag version from the following URL:
    # https://github.com/rsms/inter/releases/download/v3.19/Inter-3.19.zip
    version=$(printf "%s" "$src" | sed -n 's|.*\/\(v.*\)\/.*|\1|p')

    archive="${DATA_DIR:=data}/inter-${version}.zip"
    distDir="web/static/fonts"

    extract() {
        # Extract specific variants that we use.
        fonts="Regular Bold Italic BoldItalic"
        for font in $fonts; do
            unzip -j -d "$distDir" "$archive" "Inter Web/Inter-${font}.*"
        done
    }

    # Check if the latest version isn't downloaded.
    if [ ! -e "$archive" ]; then
        log "Downloading Inter $version archive."

        # Remove old fonts.
        rm -rf "$distDir"

        # Download the archive with their respective version number.
        curl -L "$src" -o "$archive"

        extract
    else
        # Skip if directory exists, otherwise extract fonts.
        if [ -e "$distDir" ]; then
            log "Fonts are up to date."
        else
            extract
        fi
    fi
}

build() {
    case "$1" in
        go-dev)
            : "Setting BIN to ${BIN:=bin/userstyles-dev}."
            log "Compiling development executable to ${BIN}."
            go build -v -o "$BIN" cmd/userstyles-world/main.go
            ;;
        go-prod)
            : "Setting BIN to ${BIN:=bin/userstyles-prod}."
            log "Compiling production executable to ${BIN}."

            c="$(git rev-list -1 HEAD)"
            v="$(git describe --tags)"
            f="-s -w -extldflags '-fno-PIC -static'"
            f="$f -X userstyles.world/modules/config.GitCommit=${c}"
            f="$f -X userstyles.world/modules/config.GitVersion=${v}"

            go build -v \
                -o "$BIN" \
                -ldflags "$f" \
                -buildmode pie \
                -tags 'osusergo netgo static_build' \
                cmd/userstyles-world/main.go
            ;;
        ts-dev)
            log "Compiling TypeScript for development environment."
            env DEBUG="true" ./bin/userstyles-ts
            ;;
        ts-prod)
            log "Compiling TypeScript for production environment."
            ./bin/userstyles-ts
            ;;
        sass-dev)
            log "Compiling Sass for development environment."
            sassc --style nested --sourcemap=inline -l \
                web/scss/main.scss web/static/css/main.css
            ;;
        sass-prod)
            log "Compiling Sass for production environment."
            sassc --style compressed web/scss/main.scss web/static/css/main.css
            ;;
        dev)
            log "Building USw for $1 environment."
            build sass-dev; build ts-dev; build go-dev
            ;;
        prod)
            log "Building USw for $1 environment."
            build sass-prod; build ts-prod; build go-prod
            ;;
    esac
}

setup() {
    case "$1" in
        go)
            log "Setting up Go environment."

            # Build initial executable.
            build go-dev
            ;;
        ts)
            log "Setting up TypeScript environment."

            # Build esbuild executable.
            go build -v -o bin/userstyles-ts cmd/userstyles-ts/main.go

            # Build initial JS file.
            build ts-dev
            ;;
        sass)
            log "Setting up Sass environment."

            # Sassc fails to create the compiled file if target directory
            # doesn't exist, so we have to create it manually.
            mkdir -p web/static/css

            # Build initial CSS file.
            build sass-dev
            ;;
    esac
}

watch() {
    case "$1" in
        go)
            log "Watching Go files."
            air -c tools/air_go.toml
            ;;
        [tj]s)
            log "Watching TypeScript files."
            env DEBUG="true" air -c tools/air_ts.toml
            ;;
        s[as]ss|css)
            log "Watching Sass files."
            air -c tools/air_sass.toml
            ;;
        all|dev)
            # Execute jobs in separate subshells, so that we can run all of them
            # simultaneously.  I'm not sure if there's a better way to implement
            # this functionality, but this is the best attempt I could come up
            # with that doesn't have any downsides to it.  Delay is there only
            # to separate log messages.
            (watch sass) &
            (sleep 0.4 && watch ts) &
            (sleep 0.8 && watch go) &

            # Wait for subshells to terminate before exiting the process,
            # otherwise you'd have to manually kill processes.
            wait
            ;;
    esac
}

buildCmd() {
    ## Build command builds different things for use during development cycle,
    ## with the exception of 'prod' argument, which builds everything for use in
    ## production environment.
    ##
    ## Arguments:
    ##
    ##   sass, scss, css - Builds Sass files to 'web/static/css' directory.
    ##   ts, js          - Builds TS files to 'web/static/ts' directory.
    ##   go              - Builds Go files to a development executable.
    ##   dev             - Builds all files for development environment.
    ##   prod            - Builds all files for production environment.
    ##
    ## Usage:
    ##
    ##   run build sass          - Builds Sass files.
    ##   run build sass build ts - Builds Sass then TS files.
    ##   run build dev start     - Builds all files, then runs starts command.

    fail() {
        case "$1" in
            -) err "Error: No argument found." ;;
            *) err "Error: Invalid argument '$1'." ;;
        esac

        err "$(helpCmd build)"
        return 1
    }

    if [ $# -ge 1 ]; then
        case "$1" in
            go)          build go-dev   ;;
            [tj]s)       build ts-dev   ;; # Match on ts or js.
            s[ac]ss|css) build sass-dev ;; # Match on sass, scss, or css.
            dev)         build dev      ;;
            prod)        build prod     ;;
            *)           fail "$1"      ;;
        esac
    else
        fail -
        return 1
    fi
}

configCmd() {
    ## Config command loads a configuration file containing environment
    ## variables.  It's meant to be used in tandem with other command(s).
    ##
    ## Usage:
    ##
    ##   run config path/to/.env       - Loads config file and exists.
    ##   run config path/to/.env setup - Creates a custom environment.
    ##   run config path/to/.env start - Starts a custom environment.

    if [ $# -ge 1 ]; then
        if  [ -e "$1" ]; then
            log "Loading variables from '$1' file."
            set -a
            # shellcheck disable=SC1090
            . "$1"
            set +a
        else
            err "Error: Failed to load '$1' file.  Is the path correct?"
            return 1
        fi
    else
        err "Error: No argument found.  Try passing a valid file."
        return 1
    fi
}

helpCmd() {
    ## Help command prints detailed documentation for a specified command, or
    ## the overview documentation of this tool.
    ##
    ## Usage:
    ##
    ##   run help       - Prints full documentation.
    ##   run help help  - Prints documentation for help command.
    ##   run help build - Prints documentation for build command.

    overview() {
        printf \
"run - UserStyles.world build tool

Synopsis:

  run COMMAND [ARGUMENT]
  run COMMAND... [ARGUMENT]

Description:

  run is a tool that abstracts common actions behind a simple interface.  It
  features a 'chainable' command parser, which allows for using multiple
  commands at once.  Case sensitivity and order of commands matters.

Commands:

  help
    Prints help overview and exits.

  help argument
    Prints help for a specific argument (command).

  setup
    Prepares development environment.

  config
    Loads environment variables from a file. (See 'run help config'.)

  build argument
    Builds files based on the argument and exit.  (See 'run help build'.)

  start
    Starts a built executable depending on the environment.

  watch argument
      Watch for file changes and rebuild files. (See 'run help watch'.)

Examples:

  run setup start
    Prepares your development environment, then runs built executable.

  run build dev start
    Builds a development executable, then runs it.

  run config path/to/custom.env build prod start
    Loads a custom environment file, builds production executable, then runs it.

  run watch all
    Continuously watches for all file changes and automatically rebuilds them.

  run config path/to/custom.env watch all
    Like previous example, but with custom environment variables [if set].
"
    }

    if [ $# -ge 1 ]; then
        pattern="${1}Cmd()"
        if ! grep "$pattern" "$0" >/dev/null; then
            err "Error: Failed to find '$1' command."
            return 1
        fi

        res=$(sed -n "/^${pattern}/,/^}$/{ /^ *##/{ s| *## \?||;p }}" "$0")
        printf "%s\n" "$res"
    else
        err "$(overview)"
        exit 0
    fi
}

setupCmd() {
    ## Setup command prepares your entire development environment.  It doesn't
    ## accept any arguments, but you use 'config' (run help config) command to
    ## load a custom variables.
    ##
    ## Usage:
    ##
    ##   run setup                     - Sets up environment with default vars.
    ##   run config path/to/.env setup - Sets up environment with custom vars.

    : "Setting DATA_DIR to ${DATA_DIR:=data}"
    log "Setting up development environment."

    mkdir -p "$DATA_DIR"
    getFonts
    setup sass
    setup ts
    setup go

    # Perform database migration and exit.
    DB_DROP=1 DB_MIGRATE=1 startCmd
}

startCmd() {
    ## Start command runs an executable depending on $BIN environment variable.
    ## It doesn't accept any arguments, but you can provide the $BIN variable
    ## using a custom configuration file.

    : "Setting BIN to ${BIN:=bin/userstyles-dev}."
    log "Starting USw from ${BIN}."
    check vips
    "./${BIN}"
}

watchCmd() {
    ## Watch command, similarly to build command, builds different things.
    ## Unlike build command, it isn't chainable and it starts watching for file
    ## changes.  Additionally, it only creates builds suitable for development
    ## environment.  It accepts only one argument.
    ##
    ## Arguments:
    ##
    ##   sass, scss, css - Starts watching and rebuilding Sass files.
    ##   ts, js          - Starts watching and rebuilding TS files.
    ##   go              - Starts watching and rebuilding Go files.
    ##   all, dev        - Runs all of the above at the same time.
    ##
    ## Usage:
    ##
    ##   run watch go  - Starts watching and rebuilding Go files.
    ##   run watch all - Starts watching and rebuilding all files.

    check air vips

    fail() {
        case "$1" in
            -) err "Error: No argument found." ;;
            *) err "Error: Invalid argument '$1'." ;;
        esac

        err "$(helpCmd watch)"
        return 1
    }

    if [ $# -ge 1 ]; then
        case "$1" in
            go)          watch go   ;;
            [tj]s)       watch ts   ;; # Match on ts or js.
            s[ac]ss|css) watch sass ;; # Match on sass, scss, or css.
            all|dev)     watch all  ;;
            *)           fail "$@"  ;;
        esac
    else
        fail -
        return 1
    fi
}

fallbackCmd() {
    err "Error: Unknown command '$1'."; err; err "$(helpCmd)"
    return 1
}

main() {
    if [ $# -eq 0 ]; then
        err "Error: No arguments found."; err; err "$(helpCmd)"
        return 1
    fi

    # Check if build dependencies are installed.
    check git go curl unzip sassc

    # Go to project's root directory.
    cd "$(git rev-parse --show-toplevel)"

    # Command/argument parser.
    while [ $# -gt 0 ]; do
        case "$1" in
            build)
                shift; buildCmd "$@"; took; shift ;;
            config)
                shift; configCmd "$@"; shift ;;
            help)
                shift; helpCmd "$@"; shift ;;
            setup)
                shift; setupCmd "$@"; took ;;
            start)
                shift; startCmd "$@" ;;
            watch)
                shift; watchCmd "$@"; return 0 ;;
            *)
                fallbackCmd "$@" ;;
        esac
    done
}

main "$@"
