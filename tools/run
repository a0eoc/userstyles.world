#!/usr/bin/env sh

set -eu

log() { printf "%s %s\n" "$(date '+%Y-%m-%d %H:%M:%S')" "$@"; }

check() {
    hint() {
        case "$1" in
            air) printf "Install it with 'go install github.com/cosmtrek/air@latest'.\n" ;;
            curl) printf "Install 'curl' with your package manager.\n" ;;
            go) printf "Install 'go' with your package manager.\n" ;;
            git) printf "Install 'git' with your package manager.\n" ;;
            sassc) printf "Install 'sassc' with your package manager.\n" ;;
            unzip) printf "Install 'unzip' with your package manager.\n" ;;
            inotify*) printf "Install 'notify-tools' with your package manager.\n" ;;
        esac
    }

    for arg in "$@"; do
        if ! command -v "$arg" >/dev/null; then
            printf "Error: Missing '%s' dependency.\n" "$arg"
            hint "$arg"
            return 1
        fi
    done
}

export_secrets() {
    log "Loading environment variables."

    set -a
    . data/.env
    set +a
}

fonts() {
    log "Downloading fonts."
    check curl unzip

    # Extract the latest release.
    src="$(curl -s https://api.github.com/repos/rsms/inter/releases/latest | sed -n 's/.*browser_download_url.*"\(http.*\)"/\1/p')"

    # Extract tag version from the following URL:
    # https://github.com/rsms/inter/releases/download/v3.19/Inter-3.19.zip
    version="$(echo "$src" | sed -n 's/.*\/\(v.*\)\/.*/\1/p')"

    # Check if the latest version is installed.
    if [ ! -e "data/inter-${version}.zip" ]; then
        # If fonts directory exists, remove it.
        if [ -e web/static/fonts ]; then
            log "Removing old fonts."
            rm -f data/inter-*.zip
            rm -rf web/static/fonts
        fi

        log "Downloading Inter $version..."

        # Download the archive with their respective version number.
        curl -L "$src" -o "data/inter-$version.zip"

        _fontsExtract "$version"
    else
        # If fonts directory doesn't exist, extract fonts.
        if [ ! -e web/static/fonts ]; then
            log "Extracting fonts..."
            _fontsExtract "$version"
        else
            log "Fonts are up to date."
        fi
    fi
}

_fontsExtract() {
    # Extract specific variants that we use.
    fonts="Regular Bold Italic BoldItalic"
    for font in $fonts; do
        unzip -j -d web/static/fonts "data/inter-$1.zip" "Inter Web/Inter-${font}.*"
    done
}

prod() {
    log "Running production configuration."

    export_secrets
    env PORT=":${2:-3001}" \
        DB="${3:-prod.db}" \
        SALT="${4:-15}" \
        ./userstyles.world
}

sass() {
    log "Compiling SCSS files."
    check sassc inotifywait

    # Sassc fails if directory doesn't exist.
    mkdir -p web/static/css

    if [ "$#" -eq 2 ] && [ "$2" = "--watch" ]; then
        while inotifywait -r -e close_write web/scss; do
            sassc web/scss/main.scss web/static/css/main.css
        done
    else
        sassc --style compressed web/scss/main.scss web/static/css/main.css
    fi
}

drop() {
    log "Dropping database tables."

    env DB_DROP="1" \
        DB_COLOR="true" \
        DB_DEBUG="${2:-silent}" \
        DB_RANDOM_DATA="${3:-false}" \
        air -c tools/air.toml
}

dev() {
    log "Running development configuration."

    export_secrets
    env DB_DEBUG="${2:-silent}" \
        DB_DROP="${3:-false}" \
        DB_COLOR="true" \
        air -c tools/air.toml
}

# This option builds USw executable for use in production.
# To build it on unsupported systems, run `go build` in project root directory.
build() {
    log "Compiling static executable."

    fonts
    sass
    ts

    c="$(git rev-list -1 HEAD)"
    v="$(git describe --tags)"

    GOOS=linux go build \
        -ldflags "-s -w -extldflags '-fno-PIC -static'
                  -X userstyles.world/modules/config.GitCommit=${c}
                  -X userstyles.world/modules/config.GitVersion=${v}" \
        -buildmode pie -tags 'osusergo netgo static_build'
}

ts() {
    log "Compiling TypeScript files."

    env DEBUG="${2:-false}" \
        WATCH="${3:-false}" \
        go run web/typescript/run.go
}

init() {
    if [ $# -eq 0 ]; then
        printf "Error: No arguments.\n"
        # TODO: Show usage/help command.
        return 1
    fi

    # Seems unnecessary, but you never know.
    check git go air

    # Go to project's root directory.
    cd "$(git rev-parse --show-toplevel)"
}

init "$@"
case "$1" in
    build) build "$@" ;;
    fonts) fonts "$@" ;;
    dev)  dev    "$@" ;;
    drop) drop   "$@" ;;
    prod) prod   "$@" ;;
    sass) sass   "$@" ;;
    ts) ts       "$@" ;;
    *)
        printf "Error: Unknown subcommand '%s'.\n" "$1"
        # TODO: Show usage/help command.
        exit 1
        ;;
esac
